import * as React from 'react';
import { RouteComponentProps } from 'react-router';

import { ResourceLink, useK8sWatchResource } from '@openshift-console/dynamic-plugin-sdk';
import { Badge, DescriptionList, Flex, FlexItem, PageSection, Title } from '@patternfly/react-core';

import { ApplicationKind, ApplicationModel } from '../../models/ApplicationModel';
import { ApplicationSetKind, ApplicationSetModel } from '../../models/ApplicationSetModel';
import HealthStatus from '../../Statuses/HealthStatus';
import { Conditions } from '../../utils/components/Conditions/Conditions';
import { getAppSetGeneratorCount, getAppSetStatus } from '../../utils/gitops';
import { useGitOpsTranslation } from '../../utils/hooks/useGitOpsTranslation';
import BaseDetailsSummary, {
  DetailsDescriptionGroup,
} from '../shared/BaseDetailsSummary/BaseDetailsSummary';

import './AppSetDetailsTab.scss';

type AppSetDetailsTabProps = RouteComponentProps<{ ns: string; name: string }> & {
  obj?: ApplicationSetKind;
};

const AppSetDetailsTab: React.FC<AppSetDetailsTabProps> = ({ obj }) => {
  const { t } = useGitOpsTranslation();
  const namespace = obj?.metadata?.namespace;

  // Get applications to count generated apps
  const [applications] = useK8sWatchResource<ApplicationKind[]>({
    groupVersionKind: {
      group: ApplicationModel.apiGroup,
      version: ApplicationModel.apiVersion,
      kind: ApplicationModel.kind,
    },
    namespace: namespace || obj?.metadata?.namespace,
    isList: true,
  });

  if (!obj) return null;

  const status = obj.status || {};
  const spec = obj.spec || {};
  const totalGenerators = getAppSetGeneratorCount(obj);
  const appSetStatus = getAppSetStatus(obj);

  // Count applications owned by this ApplicationSet
  const generatedAppsCount =
    applications?.filter((app) =>
      app.metadata?.ownerReferences?.some(
        (owner) => owner.kind === obj.kind && owner.name === obj.metadata?.name,
      ),
    ).length || 0;

  return (
    <>
      <PageSection>
        <Title headingLevel="h2" className="co-section-heading">
          Argo CD ApplicationSet details
        </Title>
        <Flex
          justifyContent={{ default: 'justifyContentSpaceEvenly' }}
          direction={{ default: 'column', lg: 'row' }}
        >
          <Flex flex={{ default: 'flex_2' }}>
            <FlexItem>
              <BaseDetailsSummary obj={obj} model={ApplicationSetModel} />
            </FlexItem>
          </Flex>
          <Flex flex={{ default: 'flex_2' }} direction={{ default: 'column' }}>
            <FlexItem>
              <DescriptionList className="pf-c-description-list">
                <DetailsDescriptionGroup
                  title={t('Status')}
                  help={t('Current health status of the ApplicationSet.')}
                >
                  <HealthStatus status={appSetStatus} />
                </DetailsDescriptionGroup>

                <DetailsDescriptionGroup
                  title={t('Generated Apps')}
                  help={t('Number of applications generated by this ApplicationSet.')}
                >
                  <Badge isRead color="blue">
                    {generatedAppsCount}{' '}
                    {generatedAppsCount !== 1 ? t('applications') : t('application')}
                  </Badge>
                </DetailsDescriptionGroup>

                <DetailsDescriptionGroup
                  title={t('Generators')}
                  help={t('Number of generators configured in this ApplicationSet.')}
                >
                  <Badge isRead color="grey">
                    {totalGenerators} {totalGenerators !== 1 ? t('generators') : t('generator')}
                  </Badge>
                </DetailsDescriptionGroup>

                <DetailsDescriptionGroup
                  title={t('App Project')}
                  help={t('Argo CD project that this ApplicationSet belongs to.')}
                >
                  <ResourceLink
                    namespace={obj?.metadata?.namespace}
                    groupVersionKind={{
                      group: 'argoproj.io',
                      version: 'v1alpha1',
                      kind: 'AppProject',
                    }}
                    name={spec.template?.spec?.project || 'default'}
                  />
                </DetailsDescriptionGroup>

                {spec.template?.spec?.source?.repoURL && (
                  <DetailsDescriptionGroup
                    title={t('Repository')}
                    help={t('Git repository URL where the ApplicationSet configuration is stored.')}
                  >
                    <a
                      href={spec.template.spec.source.repoURL}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      {spec.template.spec.source.repoURL}
                    </a>
                  </DetailsDescriptionGroup>
                )}
              </DescriptionList>
            </FlexItem>
          </Flex>
        </Flex>
      </PageSection>

      <PageSection>
        <Title headingLevel="h2" className="co-section-heading">
          Conditions
        </Title>
        <Conditions conditions={status.conditions} />
      </PageSection>
    </>
  );
};

export default AppSetDetailsTab;
